"""
Initialize a project with snakegit details.
"""
import ConfigParser
import os
import os.path
import subprocess

from clint.textui import puts, colored
import git

ignore_list = [ '*.pyc', 'build', 'dist', 'gearbox*', '*.egg-info', 'vendor/python' ]
paths = [ 'tests', 'tests/unit', 'tests/functional', 'test_configs', 'docs', 'docs/src', 'src' ]
files = [ 'snake.cfg', 'MANIFEST.in', 'setup.py' ]
readme_strings = {
        'tests': "This is the root directory for tests\n",
        'tests/unit': "All unit tests go in this directory\n",
        'tests/functional': "Functional tests go in this directory\n",
        'test_configs': 'This directory is added to the PYTHONPATH when tests are run\n',
        'docs': 'Root directory for docs\n',
        'docs/src': 'Source for documentation\n',
        'src': 'All of your source goes in here\n'
        }

meta_fields = [
        'name',
        'version'
        ]

setup_py_template = """# Generated by snakegit

import setuptools
import ConfigParser

parser = ConfigParser.RawConfigParser()
parser.read('snake.cfg')

setuptools.setup(name=parser.get('release', 'name'),
    version=parser.get('release', 'version'),
    package_dir={'': 'src'},
    packages=setuptools.find_packages('src'),
    provides=setuptools.find_packages('src')
    )
"""

manifest_in_template = "include snake.cfg"

def main():
    """
    Initializes a project to work with snake
    """
    if not os.path.exists('.git'):
        repo = git.Repo.init(os.path.abspath('.'))
    else:
        repo = git.Repo('.')
    git_ignore = os.path.abspath('./.gitignore')
    git_updated = False
    # generate .gitignore file
    updated = False
    if os.path.exists(git_ignore):
        with open(git_ignore, 'a') as handle:
            for ignore in ignore_list:
                try:
                    subprocess.check_call(['grep', '-q', ignore, git_ignore])
                except subprocess.CalledProcessError:
                    updated = True
                    handle.write(ignore)
                    git_updated = True
    else:
        updated = True
        with open(git_ignore, 'w') as handle:
            for ignore in ignore_list:
                handle.write(ignore)
        git_updated = True
    
    if updated:
        repo.index.add(['.gitignore'])
    # make test and doc directories
    for path in paths:
        if not os.path.exists(os.path.abspath(path)):
            os.mkdir(path)
            with open(os.path.join(path, 'README'), 'w') as handle:
                handle.write(readme_strings[path])
            repo.index.add([path])
            git_updated = True

    # Create the metadata files
    if not os.path.exists(os.path.abspath('snake.cfg')):
        parser = ConfigParser.RawConfigParser()
        parser.add_section('release')
        if os.path.exists(os.path.abspath('setup.py')):
            get_meta = lambda field: subprocess.check_output([
                'python',
                'setup.py',
                '--{0}'.format(field)]).strip()
            metadata = [ (field, get_meta(field)) for field in meta_fields ]
            metadata = dict(metadata)
            puts(colored.yellow("""
The snake.cfg file has been created, but because you already have
a setup.py, the file is not being used.  Please update your
setup.py to pull in the snake.cfg details.  Here is an example:

{0}""".format(setup_py_template)))

        else:
            metadata = {}
            for field in meta_fields:
                msg = 'What is the {0} for this project? '.format(field)
                metadata[field] = raw_input(msg)
            with open('setup.py', 'w') as handle:
                handle.write(setup_py_template)
        for field in meta_fields:
            parser.set('release', field, metadata[field])
        with open('snake.cfg', 'w') as handle:
            parser.write(handle)
        git_updated = True    
    if not os.path.exists(os.path.abspath('MANIFEST.in')):
        with open('MANIFEST.in', 'w') as handle:
            handle.write(manifest_in_template)
        git_updated = True
    else:
        write = False
        with open('MANIFEST.in', 'r') as handle:
            if 'snake.cfg' not in handle.read():
                write = True
        if write:
            with open('MANIFEST.in', 'a') as handle:
                handle.write(manifest_in_template)
            git_updated = True
    
    if not os.path.exists('requirements.txt'):
        with open('requirements.txt', 'w') as handle:
            handle.write('# Created by Gitsnake. HISSSSSSSSSSSSSSSSSSSSSSSSS\n')

    for path in files:
        repo.index.add([path])

    if git_updated:
        print "A number of resources have been added to your git repo."
        print "Don't forget to commit them"
    

if __name__ == '__main__':
    main()
